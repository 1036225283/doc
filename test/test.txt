1.资产服务
    总资产
        http://localhost:8686/fcoin_gate/assets/totalAssests
    总资产详情 按币分类
        http://localhost:8686/fcoin_gate/assets/totalAssestsDetailByCurrency

    币种服务
        http://localhost:8686/user_gate/user/listDictData

    用户币币账户详情
            http://localhost:8686/fcoin_gate/assets/userBCoinDetail

    用户钱包账户详情
            http://localhost:8686/fcoin_gate/assets/userAccountDetail

    总资产详情 按币和账户分类
        http://localhost:8686/fcoin_gate/assets/totalAssestsDetailByCurrencyByAccount

    用户法币账户详情
        http://localhost:8686/fcoin_gate/assets/userFCoinDetail             ok

    用户币币账户详情
        http://localhost:8686/fcoin_gate/assets/userBCoinDetail             ok

    用户钱包账户详情
        http://localhost:8686/fcoin_gate/assets/userAccountDetail           ok


    新增某一币种地址服务
        http://localhost:8686/mainAccount/myAccount/addAccountAddress

    提币记录
        http://localhost:8686/fcoin_gate/assets/userCoinRechargeOut         ok

    充币记录
        http://localhost:8686/fcoin_gate/assets/userCoinRechargeIn          ok

    获取某一币种的充值地址
        http://localhost:8686/fcoin_gate/assets/getCoinRechargeInAddress



if (item.state == 1) statusText = '充币中'
if (item.state == 2) statusText = '成功'
if (item.state == 3) statusText = '失败'
if (item.state == 4) statusText = '提币状态'
if (item.state == 5) statusText = '等待提币'
if (item.state == 6) statusText = '撤销中'
if (item.state == 7) statusText = '已撤销'
if (item.state == 8) statusText = '提现成功'
if (item.state == 9) statusText = '提现失败'
if (item.state == 10) statusText = '提币中'




java -Xms512m -Xmx512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:MaxNewSize=256m -jar

bug
    last ip and address


phone


    		String phoneCodeRedis = redisRepository.get(Constants.MSG_PHONE_PRE + user.getAreaCode() + user.getPhone());


email
           String emailCodeRedis = redisRepository.get(Constants.MSG_EMAIL_PRE + email);

google
                          GoogleAuthenticator googleAuthenticator = new GoogleAuthenticator();
                          String secret = redisRepository.get(RedisConst.GOOGLE_SECRET + user.getId());
                          log.info("谷歌验证:{}", secret);
                          boolean authorize = googleAuthenticator.authorize(secret, googleCode);
                          if (!authorize) {
                              return Result.error("谷歌验证码错误");
                          }


error
             catch (CustomException e) {
                        return e.getResult();
                    }



70B283585A74B7FF90413CACAC18F09E


Abc=1234



Error:(20, 26) java: lambda expressions are not supported in -source 1.5
  (use -source 8 or higher to enable lambda expressions)




                      <select id="currencyConfirm" resultMap="BaseResultMap" parameterType="com.akagp.model.AccountTransfer">
                      		SELECT
                      		  id,user_id,currency,available,locking,valuation,is_del,created,updated
                      		FROM `account`
                      		WHERE user_id = #{userId}
                      		  AND `currency` = #{currency}
                      </select>

                      <update id="decrToAvailable" parameterType="com.akagp.model.AccountTransfer">
                      		UPDATE
                    		  `account`
                    		SET
                    		  `available` = `available` - #{num},
                    		  `updated` = NOW()
                    		WHERE `user_id` = #{userId}
                    		  AND `currency` = #{currency}
                    		  AND `available` &gt; #{num}
                      </update>


183061909010100001

1829015010100001




 example.setOrderByClause("created desc");

/query_gate/assets/totalAssests


/user_gate/**       account_user_gate
/bcoin_gate/**      account_bcoin_gate
/fcoin_gate/**      account_fcoin_gate
/agent_gate/**      account_agent_gate
/main_gate/**       account_wallet_gate
/query_gate/**      account_query
/auth_gate/**       account_auth_gate




0x3103f082122ad81d6668c31b0b8896472745c011
18151906091550064717638903897306360121997835038900363147091182389649124893029
11809325538125816191407067160011414236818990536153244024053031910511655456238911418069218389359358241294902763258662628660588846585431586528575562029705161



          args:
            retries: 3
      - id: auth
        uri: lb://AKAGP-PROVIDER-AUTH
        predicates:
        - Path=/account_auth_gate/**
        filters:
        - StripPrefix=1
        - SaveSession
        - name: Retry
          args:
            retries: 3
  redis:
    host: 192.168.31.245
    port: 6379
    password: 123456
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHffkAsXf21twd5Rkk+NSmGJZA9CpvXQbxH6pfOpXd9GbsB4CQ9qaxn0EtGEg7R3GZPvo5E07NceS18slAs69rQjGUILUXK4f0la7LDJsCrNTBYSvFbe3bkg8foHg8abYZmAsVlyY7Mw9T72Gy6qRTOxcLWS4cWTFdwr54j6uHEIovbxIZF46NUqnbQPW9DXBjmN9mtxmF65szbiRj31nGTS3RQ2+IYYxkog1kJ3WOTzdK6j+GODDWJc/cdPCvyrjY2+QZvitCl3E9GjTBaPV482LiRzZoL/jChrPp9Z7qYcri9L8L9qhOBhhLZaf6MyMN1sCw279Qr4Zh48ndU3zl id512@126.com

token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxODMxMjEwNTgwMTAxMDAwMDEsImxvZ2luX3R5cGUiOjIsImV4cCI6MTU0MjUyMTM0NiwibmJmIjoxNTQyMzQ4NTQ2fQ.ZyIlo21eLZUdc7NPjrQMyEm8jwGUmb__oehI6x5cV2I




token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxODMxMjEwNTgwMTAxMDAwMDEsImxvZ2luX3R5cGUiOjIsImV4cCI6MTU0Mjg1MDIxMiwibmJmIjoxNTQyNjc3NDEyfQ.cwkkt305svrei0BjZCuGbL6EHwir3TxTWc3Ga6Tnlrs

token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxODMxMjEwNTgwMTAxMDAwMDEsImxvZ2luX3R5cGUiOjIsImV4cCI6MTU0Mjg1MDQ1NSwibmJmIjoxNTQyNjc3NjU1fQ.BLKhcS5MrX9RtQ0LbDV3nVXcdZ3DLi7NCS9a_AVh6Bg





 coin_recharge_record WHERE ( is_del = ? and user_id = ? and direction = ? ) LIMIT ?, ?
==> Parameters: 0(Integer), 183191731010100001(Long), 1(Integer), 10(Integer), 10(Integer)
<==    Columns: id, user_id, direction, currency, msg, price, flow_id, num, address, created, updated, is_del, progress, state
<==        Row: 26, 183191731010100001, 1, ETC, 2, 0.00100000, null, 1.00000000, 222, 2018-11-16 02:26:49.0, 2018-11-16 02:26:49.0, 0, 1, 1
<==        Row: 27, 183191731010100001, 1, ETC, 11, 0.00100000, null, 1.00000000, 1233, 2018-11-16 02:29:04.0, 2018-11-16 02:29:04.0, 0, 1, 1
<==      Total: 2
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4663dac]
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3e0f9c9] was not registered for synchronization because synchronization is not active
JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b194a05] will not be managed by Spring
==>  Preparing: SELECT count(0) FROM coin_recharge_record WHERE (is_del = ? AND user_id = ? AND direction = ?)
==> Parameters: 0(Integer), 183191731010100001(Long), 1(Integer)
<==    Columns: count(0)
<==        Row: 12
<==      Total: 1
==>  Preparing: SELECT id,user_id,direction,currency,msg,price,flow_id,num,address,created,updated,is_del,progress,state FROM coin_recharge_record WHERE ( is_del = ? and user_id = ? and direction = ? ) LIMIT ?, ?
==> Parameters: 0(Integer), 183191731010100001(Long), 1(Integer), 10(Integer), 10(Integer)
<==    Columns: id, user_id, direction, currency, msg, price, flow_id, num, address, created, updated, is_del, progress, state
<==        Row: 26, 183191731010100001, 1, ETC, 2, 0.00100000, null, 1.00000000, 222, 2018-11-16 02:26:49.0, 2018-11-16 02:26:49.0, 0, 1, 1
<==        Row: 27, 183191731010100001, 1, ETC, 11, 0.00100000, null, 1.00000000, 1233, 2018-11-16 02:29:04.0, 2018-11-16 02:29:04.0, 0, 1, 1
<==      Total: 2










@Override
    protected void onHandleIntent(Intent intent) {
        //获取密码
        String password = intent.getStringExtra("PASSWORD");
        String privatekey = "";
        //不一定有私钥
        if (intent.hasExtra("PRIVATE_KEY")) {
            normalMode = false;  //如果没有私钥，就是正常创建钱包，有私钥是扫码创建钱包
            privatekey = intent.getStringExtra("PRIVATE_KEY");
        }
        //创建或添加钱包的通知
        sendNotification();
        try {
            String walletAddress;
            if (normalMode) { // 创建新的密钥
                walletAddress = OwnWalletUtils.generateNewWalletFile(password, new File(this.getFilesDir(), ""), true);   //获取钱包地址
            } else { // Privatekey passed  //通过私钥创建，秘钥对
                ECKeyPair keys = ECKeyPair.create(Hex.decode(privatekey));
                walletAddress = OwnWalletUtils.generateWalletFile(password, keys, new File(this.getFilesDir(), ""), true);    //获取钱包地址
            }
           //添加到钱包存储仓库
            WalletStorage.getInstance(this).add(new FullWallet("0x" + walletAddress, walletAddress), this);
            //命名转换
            AddressNameConverter.getInstance(this).put("0x" + walletAddress, "Wallet " + ("0x" + walletAddress).substring(0, 6), this);
            Settings.walletBeingGenerated = false;
            //结束时再次拼接通知
            finished("0x" + walletAddress);
        } catch (CipherException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }
    }

作者：CangWang
链接：https://www.jianshu.com/p/36ed013a9af7
來源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。


99.96987000

32Bv7ra1yoJUGVmcRdy8i1BDGEcFFSZxos

195000000000000000
195000000000000000

1000000000000000
web3.formwei(eth.getBalance(eth.accounts[1]))
 eth.getBalance(0x37a716fbb4229dbefcb2d8be177b11d2bb13fe2d)

2
2N5n7oMCdK6qU4tGqML8t6fySDbbJrZno8W

1
2N32EL95xQ4KvBX1JNxrWAzznSESuAxrqVg

[
  [
    [
      "n2wtyvfFhF9F4JmuBFxrkY4M5MBZAGSL71",
      0.00000000
    ]
  ],
  [
    [
      "2N2wZDnjRK88qNTRXFFuyF17WXf5QvoHpzf",
      0.00000000
    ],
    [
      "2N5n7oMCdK6qU4tGqML8t6fySDbbJrZno8W",
      0.00000000,
      "123"
    ],
    [
      "2NEzAJV14az36iSgjt5n43B8B5BAKf2GrN8",
      0.99993360
    ]
  ]
]

[
  [
    [
      "mm6eUwNxQJEi3BrcZmboucz6fA8PVpRob4",
      3050.00000000
    ]
  ],
  [
    [
      "mnJdXgn8725FqkrzpmV794rRdhaNfeWvEJ",
      450.00000000
    ],
    [
      "2N43pu2HRM8oEQoTm4mCRwpetrSrggntW4p",
      29.99992880
    ],
    [
      "2N8EvMP1gjpdETer1BYP87pFzMJXGMLySt9",
      0.00000000
    ]
  ],
  [
    [
      "msvXpF5L9zpVqd7sttSn6ri9Gn47gGLQiE",
      50.00000000
    ]
  ],
  [
    [
      "mtdmoQu4Gh6RywJijLzJd3Sp852wEgLc52",
      0.00000000
    ]
  ],
  [
    [
      "mvwg5LwDtqFb39rvawHr7uQnNRkH9dZSCS",
      0.00000000
    ]
  ],
  [
    [
      "mxNkbGeZPh1nLzVsGzzugUDCH6AMAaF7ZY",
      0.00000000
    ]
  ],
  [
    [
      "myFN3jDGuPnAQJJTGJc14es2hKrgkfTJSB",
      0.00000000
    ]
  ],
  [
    [
      "n29BbgY37fuLTWryoB3aSy8Z7pumFUsQer",
      0.00000000
    ]
  ],
  [
    [
      "n2ur1LaahnSMuPX3HghF9BWksPcmrFVxUw",
      0.00000000
    ]
  ],
  [
    [
      "2N32EL95xQ4KvBX1JNxrWAzznSESuAxrqVg",
      5.00000000,
      ""
    ]
  ]
]


    @PostMapping(value = "/getCoinRechargeInAddress")
    public Result getCoinRechargeInAddress(@RequestParam("currency") String currency) {

        try {

            User user = null;
            if (!test) {
                user = getLoginUser();
            } else {
                user = new User();
                user.setId(183121058010100001l);
            }

            if (RegexUtils.isNull(currency)) {
                return Result.error("currency is null");
            }

            List<AccountAddress> list = accountService.listAccountAddressIn(user.getId(), currency);

            if (list.size() == 0) {

                String account = "";
                String address = "";

                CoinAccount coinAccount = coinService.getNewAddress(currency);
                if ("BTC".equals(currency)) {
//                    account = redisRepository.getId(AccountConst.ACCOUNT_TRANSFER_ID, GenIndexUtil.getIdPrefix(new Date()), AccountConst.ACCOUNT_TRANSFER_MIDDLE).toString();
                    account = coinAccount.getAccount();
                    address = btcGateClient.getnewaddress(account);
                } else if ("ETH".equals(currency)) {
                    address = coinAccount.getAddress();
                }
                accountService.addAccountAddressIn(user.getId(), currency, address, account);
                list = accountService.listAccountAddressIn(user.getId(), currency);
            }

            return Result.ok(list.get(0));
        } catch (CustomException e) {
            return e.getResult();
        } catch (Exception e) {
            return Result.error("system is error");
        }
    }


    /**
     * 划拨 task
     *
     * @return
     */
    @PostMapping(value = "/taskCoinOutTransfer")
    public Result taskCoinOutTransfer() {

        try {

            /**
             * flag	boolean
             * txId	string
             */
//            List<CoinRechargeRecord> listBig = accountService.listBigAmount();

            List<CoinRechargeRecord> listSmall = accountService.listSmallAmount();

//            listBig.addAll(listSmall);

            log.info("提币划转task list.size = " + listSmall.size());
            for (CoinRechargeRecord record : listSmall) {
                if ("ETH".equals(record.getCurrency())) {
                    try {
                        Map<String, Object> map = coinGateClient.sendToAddress(record.getCurrency(), record.getAddress(), record.getNum(), record.getPrice());
                        if (map.containsKey("txId")) {
                            record.setTxid(map.get("txId").toString());
                            accountService.updateCoinRechargeRecordTxIdAndState(record);
                            continue;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        continue;
                    }

                } else if ("BTC".equals(record.getCurrency())) {
                    try {
                        JSONObject json = btcGateClient.sendtoaddress(record.getAddress(), record.getNum().doubleValue());
                        if (json == null) {
                            continue;
                        }

                        log.info("提币划转task json = " + json.toString());
                        if (!json.containsKey("flag") || !json.containsKey("txId")) {
                            continue;
                        }

                        boolean flag = json.getBoolean("flag");
                        String txId = json.getString("txId");
                        if (flag) {
                            record.setTxid(txId);
                            accountService.updateCoinRechargeRecordTxIdAndState(record);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        continue;
                    }

                }
            }
            return Result.ok("");
        } catch (CustomException e) {
            return e.getResult();
        } catch (Exception e) {
            e.printStackTrace();
            return Result.error(e.getMessage());
        }
    }

    /**
     * 划拨确认 task
     *
     * @return
     */
    @PostMapping(value = "/taskCoinOutTransferConfirm")
    public Result taskCoinOutTransferConfirm() {

        try {
            //btc确认数
            List<CoinRechargeRecord> list = accountService.getCoinRechargeRecordByTransfering();
            log.info("提币划转确认task list.size = " + list.size());
            for (CoinRechargeRecord record : list) {
                log.info("taskCoinOutTransferConfirm:record.id = " + record.getId());
                log.info("taskCoinOutTransferConfirm:record.txId = " + record.getTxid());
                if ("BTC".equals(record.getCurrency())) {
                    Integer num = btcGateClient.selectConfirm(record.getTxid());
                    log.info("taskCoinOutTransferConfirm:BTC.code = " + num);
                    if (num > 6) {
                        accountService.coinRechargeOutSuccess(record);
                    }
                } else if ("ETH".equals(record.getCurrency())) {
                    Integer code = btcGateClient.selectConfirm(record.getTxid());
                    log.info("taskCoinOutTransferConfirm:BTC.code = " + code);
                    if (code == 1) {
                        accountService.coinRechargeOutSuccess(record);
                    }
                }
            }
            return Result.ok("");
        } catch (CustomException e) {
            return e.getResult();
        } catch (Exception e) {
            e.printStackTrace();
            return Result.error(e.getMessage());
        }
    }

    /**
     * 充币task
     *
     * @return
     */
    @PostMapping(value = "/taskCoinIn")
    public Result taskCoinIn() {

        try {

            List<AccountAddress> list = accountService.getALlAccountAddress();

            log.info("充币task list.size = " + list.size());

            for (AccountAddress accountAddress : list) {

                BigDecimal balance = BigDecimal.ZERO;

                if ("BTC".equals(accountAddress.getCurrency())) {

                    log.info("充币task btcGateClient.getBalance.before ,account = " + accountAddress.getAccount() + " balance = " + accountAddress.getBalance());
                    try {
                        double dBalance = btcGateClient.getBalance(accountAddress.getAccount());
                        balance = new BigDecimal(dBalance);
                    } catch (Exception e) {
                        continue;
                    }



                    log.info("充币task balance = " + balance + " account = " + accountAddress.getAccount() + " address = " + accountAddress.getAddress());

                    if (balance.compareTo(accountAddress.getBalance()) != 1) {
                        continue;
                    }

                    balance = balance.subtract(accountAddress.getBalance());

                    log.info("充币task 真实余额 = " + balance);

                } else if ("ETH".equals(accountAddress.getCurrency())) {
                    try {
                        balance = coinGateClient.getBalance(accountAddress.getCurrency(), accountAddress.getAddress());
                    } catch (Exception e) {
                        continue;
                    }


                    if (balance.compareTo(accountAddress.getBalance()) != 1) {
                        continue;
                    }

                    balance = balance.subtract(accountAddress.getBalance());

                    log.info("充币task 真实余额 = " + balance);


                }
                accountAddress.setBalance(balance);
                CoinRechargeRecord coinRechargeRecord = new CoinRechargeRecord();
                coinRechargeRecord.setUserId(accountAddress.getUserId());
                coinRechargeRecord.setCurrency(accountAddress.getCurrency());
                coinRechargeRecord.setNum(balance);
                coinRechargeRecord.setAddress(accountAddress.getAddress());
                coinRechargeRecord.setAccount(accountAddress.getAccount());
                coinRechargeRecord.setState((byte) CoinRechargeRecordConst.COIN_IN_STATE_SUCCESS);
                coinRechargeRecord.setDirection(AccountConst.TRANSFER_ACCOUNT_IN);
                coinRechargeRecord.setProgress((byte) CoinRechargeRecordConst.PROGRESS_OK);
                accountService.coinRechargeIn(coinRechargeRecord, accountAddress);
            }

        } catch (CustomException e) {
            return e.getResult();
        } catch (Exception e) {
            e.printStackTrace();
            return Result.error(e.getMessage());
        }

        return Result.ok();
    }




package com.akagp.service.impl;

import com.akagp.mapper.*;
import com.akagp.model.*;
import com.akagp.service.TransferService;
import com.akagp.utils.RedisRepository;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import java.math.BigDecimal;

/**
 * Created by root on 18-11-14.
 */
public class TransferServiceImpl implements TransferService {


    @Resource
    private AccountBcoinMapper accountBcoinMapper;
    @Resource
    private AccountBcoinFlowMapper accountBcoinFlowMapper;

    @Resource
    private AccountFcoinMapper accountFcoinMapper;
    @Resource
    private AccountFcoinFlowMapper accountFcoinFlowMapper;

    @Resource
    private AccountAgentMapper accountAgentMapper;
    @Resource
    private AccountAgentFlowMapper accountAgentFlowMapper;

    @Resource
    private AccountMapper accountMapper;

    @Resource
    private AccountFlowMapper accountFlowMapper;


    //资金划转
    public void transfer(Long userId, String currency, Integer in, Integer out, BigDecimal size, BigDecimal balance) {

    }


    private Account getAccount(Long userId, String currency) {
        Account account = new Account();
        account.setUserId(userId);
        account.setCurrency(currency);
        accountMapper.selectOne(account);
        return account;
    }


    private AccountBcoin getAccountBcoin(Long userId, String currency) {
        AccountBcoin account = new AccountBcoin();
        account.setUserId(userId);
        account.setCurrency(currency);
        accountBcoinMapper.selectOne(account);
        return account;
    }

    private AccountFcoin getAccountFcoin(Long userId, String currency) {
        AccountFcoin account = new AccountFcoin();
        account.setUserId(userId);
        account.setCurrency(currency);
        accountFcoinMapper.selectOne(account);
        return account;
    }

    private AccountAgent getAccountAgent(Long userId, String currency) {
        AccountAgent account = new AccountAgent();
        account.setUserId(userId);
        account.setCurrency(currency);
        accountAgentMapper.selectOne(account);
        return account;
    }

    //update account
    private int updateAccount(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance) {

        BigDecimal balanceNew = new BigDecimal(0);
        //1-入 0-出
        if (direction == 0) {
            balanceNew = balance.add(size);
        } else {
            balanceNew = balance.subtract(size);
        }

        Account accountUpdate = new Account();
        accountUpdate.setBalance(balanceNew);


        Example example = new Example(Account.class);
        Example.Criteria criteria = example.createCriteria().
                andEqualTo("isDel", 0).
                andEqualTo("userId", userId).
                andEqualTo("balance", balance).
                andEqualTo("currency", currency);


        return accountMapper.updateByExampleSelective(accountUpdate, example);
    }


    private int updateAccountFcoin(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance) {

        BigDecimal balanceNew = new BigDecimal(0);
        //1-入 0-出
        if (direction == 0) {
            balanceNew = balance.add(size);
        } else {
            balanceNew = balance.subtract(size);
        }

        AccountFcoin accountUpdate = new AccountFcoin();
        accountUpdate.setBalance(balanceNew);


        Example example = new Example(Account.class);
        Example.Criteria criteria = example.createCriteria().
                andEqualTo("isDel", 0).
                andEqualTo("userId", userId).
                andEqualTo("balance", balance).
                andEqualTo("currency", currency);

        return accountFcoinMapper.updateByExampleSelective(accountUpdate, example);
    }

    private int updateAccountBcoin(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance) {

        BigDecimal balanceNew = new BigDecimal(0);
        //1-入 0-出
        if (direction == 0) {
            balanceNew = balance.add(size);
        } else {
            balanceNew = balance.subtract(size);
        }

        AccountBcoin accountUpdate = new AccountBcoin();
        accountUpdate.setBalance(balanceNew);


        Example example = new Example(Account.class);
        Example.Criteria criteria = example.createCriteria().
                andEqualTo("isDel", 0).
                andEqualTo("userId", userId).
                andEqualTo("balance", balance).
                andEqualTo("currency", currency);

        return accountBcoinMapper.updateByExampleSelective(accountUpdate, example);
    }

    private int updateAccountAgent(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance) {

        BigDecimal balanceNew = new BigDecimal(0);
        //1-入 0-出
        if (direction == 0) {
            balanceNew = balance.add(size);
        } else {
            balanceNew = balance.subtract(size);
        }

        AccountAgent accountUpdate = new AccountAgent();
        accountUpdate.setBalance(balanceNew);


        Example example = new Example(Account.class);
        Example.Criteria criteria = example.createCriteria().
                andEqualTo("isDel", 0).
                andEqualTo("userId", userId).
                andEqualTo("balance", balance).
                andEqualTo("currency", currency);

        return accountAgentMapper.updateByExampleSelective(accountUpdate, example);
    }


    private int addAccountFlow(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance) {
        AccountFlow flow = new AccountFlow();
        flow.setUserId(userId);
        flow.setDirection(direction);
        flow.setCurrency(currency);
        flow.setSize(size);
        flow.setBalance(balance);
        return accountFlowMapper.insertSelective(flow);
    }

    private int addAccountBcoinFlow(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance, Integer type) {
        AccountBcoinFlow flow = new AccountBcoinFlow();
        flow.setUserId(userId);
        flow.setDirection(direction);
        flow.setCurrency(currency);
        flow.setSize(size);
        flow.setBalance(balance);
        flow.setType(type);
        return accountBcoinFlowMapper.insertSelective(flow);
    }

    private int addAccountFcoinFlow(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance) {
        AccountFcoinFlow flow = new AccountFcoinFlow();
        flow.setUserId(userId);
        flow.setDirection(direction);
        flow.setCurrency(currency);
        flow.setSize(size);
        flow.setAmount(balance);
        return accountFcoinFlowMapper.insertSelective(flow);
    }

    private int addAccountAgentFlow(Long userId, int direction, String currency, BigDecimal size, BigDecimal balance, Integer type) {
        AccountAgentFlow flow = new AccountAgentFlow();
        flow.setUserId(userId);
        flow.setDirection(direction);
        flow.setCurrency(currency);
        flow.setSize(size);
        flow.setBalance(balance);
        flow.setType(type);
        return accountAgentFlowMapper.insertSelective(flow);
    }
}
