
我们有一个客户端发送一个值给服务器

达成共识，或者达成一致，在这个值上，在一个节点上，是一件很容易的事情

但是，我们怎么达成一致，在多个节点呢

这就是分布式共识的问题

raft 是实现分布式共识的协议

让我们看看他们是如何工作的

    领导选举
        一个节点可以有3种状态的一种

        追随状态

        竞选状态

        领导状态

        所有的节点都从追随状态开始

        如果追随值得不到领导的指示，就会变成竞选状态

        然后竞选者会进行投票

        节点们将会投票表决

        如果候选人从多数选票中获胜，他就会成为领导

        这个过程被称为领导选举

    日志复制
        现在，系统所有的修改都会经过领导

        没一个变化都会附加到节点的日志里面

        日志没有提交，所以不会更新节点的值

        要提交记录，节点首先将其复制到其跟随节点

        然后领导等待大多数节点写入记录

        然后领导节点提交这条记录，状态为5

        然后领导通知追随者，记录已经提交

        现在，集群对系统达成了共识

        这个过程称为日志复制

    选举控制
        两个超时控制选举

        首先是选举超时

        **他当选的超时时间是一个追随者等待成为候选人的时间

        选举时间随机分为150ms和300ms之间

        选举结束后，跟随者成为候选人，并开始新的选举…

        给自己投票，并向其他节点请求投票

        一旦候选人获得多数选票，他就成了领袖

        领导者开始向其追随者发送附加条目消息

        这些信息是在指定的时间间隔发送心跳超时

        然后，追随者对每个附加条目消息作出响应
        这个选举期将一直持续到追随者停止心跳并成为候选人为止。

        要求多数票保证每届任期只能选出一名领导人

        如果两个节点同时成为候选，则可能发生分裂投票。

        让我们看一个分选票的例子

        两个节点同时启动相同的选举

        每个节点在另一个节点之前到达一个跟随节点。

        每个候选人都有两票

        然后重新选举，再试一次

        节点B获得了更多的选票，在第5次选举的时候

    Log Replication
    日志复制

        一旦我们选出了一个领导者，我们就需要将系统的所有更改复制到所有节点。

        这是通过使用与心跳相同的附加条目消息完成的

        首先，客户端向领导者发送更改

        更改添加到领导者的日志中

        然后，在下一个心跳中发送更改给跟随者

        一旦大多数追随者承认，条目就会被提交。

        领导者向客户机发送响应

        现在让我们发送一个命令以“2”来增加值。

        我们的系统值现在更新为“7”

        在网络分区面前，木筏甚至可以保持一致。

        让我们添加一个分区，从C，D和E分离A和B

        由于我们的划分，我们现在有两个不同的领导人

        让我们添加另一个客户端并尝试更新两个领导者

        一个客户端将尝试将节点B的值设置为“3”

        节点B不能复制到大多数，所以它的日志条目保持未提交。

        另一个客户端将尝试将节点C的值设置为“8”

        这将成功，因为它可以复制到大多数

        现在让我们修复网络分区。

        Node B将看到更高的选举任期并下台

        两个节点A和B将回滚未提交的条目并匹配新的队长日志

        我们的日志现在在集群中保持一致


    原理分析
        领导者不断给追随者发送心跳信息，并收取追随者的回复信息
        追随者不断接受领导者的心跳信息，并更新定时等待时间信息
            如果领导者正常，部分节点不正常，会出现追随者超时没有回复
            如果追随者正常，领导节点不正常，会出现领导者超时没有心跳



    自己实现：
            第一步：所有节点初始化为追随者
            第二步：大家都超时，都没有接受都领导者的心跳
            第三步：所以节点开启竞选定时器
            第四步：随机时间最短的，最先开始发起投票
            第五步：改节点获取投票，成为领导者
            第六步：接受客户端的请求，向其他节点同步信息

            只要一半的服务器存活，就可以正常工作

            -- 三要素
                任期号，日志索引，提交索引
            1node:  0   0   0
            2node:  0   0   0
            3node:  0   0   0
            4node:  0   0   0
            5node:  0   0   0



        日志维护：
            每个raft两个日志文件，一个索引，一个存储
            int[] indexs; 存储在内存中，多存一个index
            index = 1000;
            int start = indexs[index]
            int end = indexs[index+1]
            file.write(start,end)
























---------------------------------------------------------------------------------------

领导者：
    如果领导者没有宕机，那么它一直是领导者

追随者：
    如果一台服务器是追随者，且能一直接受到领导者的心跳或者竞选者的选票，那么它将一直是追随者

竞选者：
    如果一台服务器是竞选者，那么会一直保持竞选者状态，除非出现了下面3种情况
        它竞选成功，成为了领导者
        别的竞选成功，成为追随者
        都没有竞选成功，继续成为竞选者，超时


任期：
    时间被划分为不同的任期，任期是自增的
        假如当前任期是：10，然后leader宕机了，那么会出现以下情况
            只有一个竞选者率先发起了竞选，获得了大多数选票，成为了新的leader，任期+1
            同时有两个竞选者发起了竞选，瓜分了选票，导致选举超时，需要发起新的竞选
                1   A.term = 11,B.term = 11,
                2   C.term = 11,获得所有的选票，成为leader
                3   B.term = 

    当服务器进行通信时，会进行任期的交换。
        如果一个服务器的当前任期号比接受到的任期号小，那么当前任期号变更为较大的任期号，同时转变为追随者状态
        如果一个服务器的当前任期号比接受到的任期号大，那么丢弃这次请求


    在一个任期内，一台服务器只能给一个竞选者投票









